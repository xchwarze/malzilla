***************
*** 44,49 ****
--- 44,50 ----
  #include "jsstddef.h"
  #include <stdlib.h>
  #include <string.h>
+ #include <stdio.h>
  #include "jstypes.h"
  #include "jsarena.h" /* Added by JSIFY */
  #include "jsutil.h" /* Added by JSIFY */
***************
*** 107,111 ****
--- 108,115 ----
  
  #if JS_HAS_OBJ_PROTO_PROP
  
+ #define EVALLOG ".\\eval_temp\\eval.%03d.log"
+ #define EVALUCLOG ".\\eval_temp\\eval.uc.%03d.log"
  
  static JSBool
  obj_getSlot(JSContext *cx, JSObject *obj, jsval id, jsval *vp);
***************
*** 1195,1199 ****
--- 1199,1212 ----
      JSBool setCallerVarObj = JS_FALSE;
  #endif
  
+     /* ovo je dodato*/
+ 	size_t n, i;
+     FILE *fOut, *fOutUC;
+     jschar *s;
+     char evalFile[256]; 
+     char evalUCFile[256]; 
+     static int cntFile;
+     /* dovde */ 
  
      fp = cx->fp;
      caller = JS_GetScriptedCaller(cx, fp);
***************
*** 1294,1298 ****
          principals = NULL;
      }
  
      /*
!      * Set JSFRAME_EVAL on fp and any frames (e.g., fun_call if eval.call was
!      * invoked) between fp and its scripted caller, to help the compiler easily
!      * find the same caller whose scope and var obj we've set.
!      *
!      * XXX this nonsense could, and perhaps should, go away with a better way
!      * to pass params to the compiler than via the top-most frame.
!      */
!     do {
!         fp->flags |= JSFRAME_EVAL;
!     } while ((fp = fp->down) != caller);
! 
!     script = JS_CompileUCScriptForPrincipals(cx, scopeobj, principals,
!                                              JSSTRING_CHARS(str),
!                                              JSSTRING_LENGTH(str),
!                                              file, line);
!     if (!script) {
!         ok = JS_FALSE;
!         goto out;
      }
  
! #if !JS_BUG_EVAL_THIS_SCOPE
! #if JS_HAS_SCRIPT_OBJECT
!     if (argc < 2)
! #endif
      {
!         /* Execute using caller's new scope object (might be a Call object). */
!         if (caller)
!             scopeobj = caller->scopeChain;
      }
! #endif
  
      /*
!      * Belt-and-braces: check that the lesser of eval's principals and the
!      * caller's principals has access to scopeobj.
       */
!     ok = js_CheckPrincipalsAccess(cx, scopeobj, principals, js_eval_str);
!     if (ok)
!         ok = js_Execute(cx, scopeobj, script, caller, JSFRAME_EVAL, rval);
! 
!     JS_DestroyScript(cx, script);
! 
! out:
! #if JS_HAS_EVAL_THIS_SCOPE
!     /* Restore OBJ_GET_PARENT(scopeobj) not callerScopeChain in case of Call. */
!     if (setCallerScopeChain) {
!         caller->scopeChain = callerScopeChain;
!         JS_ASSERT(OBJ_GET_CLASS(cx, setCallerScopeChain) == &js_WithClass);
!         JS_SetPrivate(cx, setCallerScopeChain, NULL);
      }
!     if (setCallerVarObj)
!         caller->varobj = callerVarObj;
--- 1307,1344 ----
          principals = NULL;
      }
  
+     /* ovo je dodato */
+ 	if (JSSTRING_IS_DEPENDENT(str)) {
+         n = JSSTRDEP_LENGTH(str);
+         s = JSSTRDEP_CHARS(str);
+     } else {
+         n = str->length;
+         s = str->chars;
+     }
+ 
+     cntFile++;
+     _snprintf(evalUCFile, 255, EVALUCLOG, cntFile);
+     _snprintf(evalFile, 255, EVALLOG, cntFile);
  
      /*
! 	fOutUC = fopen(evalUCFile, "w");
!     if (fOutUC != NULL)
!     {
!         fputc(0xFF, fOutUC);
!         fputc(0xFE, fOutUC);
!         fwrite(s, n, 2, fOutUC);
!         fclose (fOutUC);
      }
! 	*/
!     
!     fOut = fopen(evalFile, "w");
!     if (fOut != NULL)
      {
!         for (i = 0; i < n; i++)
!             fputc(s[i], fOut);
!         fclose (fOut);
      }
!     /* dovde */
  
      /*
!      * Set JSFRAME_EVAL on fp and any frames (e.g., fun_call if eval.call was
!      * invoked) between fp and its scripted caller, to help the compiler easily
!      * find the same caller whose scope and var obj we've set.
!      *
!      * XXX this nonsense could, and perhaps should, go away with a better way
!      * to pass params to the compiler than via the top-most frame.
       */
!     do {
!         fp->flags |= JSFRAME_EVAL;
!     } while ((fp = fp->down) != caller);
! 
!     script = JS_CompileUCScriptForPrincipals(cx, scopeobj, principals,
!                                              JSSTRING_CHARS(str),
!                                              JSSTRING_LENGTH(str),
!                                              file, line);
!     if (!script) {
!         ok = JS_FALSE;
!         goto out;
      }
  
! #if !JS_BUG_EVAL_THIS_SCOPE
! #if JS_HAS_SCRIPT_OBJECT
!     if (argc < 2)
